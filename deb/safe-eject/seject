#!/bin/bash

# seject - Safely eject USB drive
# Copyright (c) 2025 Rogerio O. Ferraz <rogerio.o.ferraz@gmail.com>

# MIT License

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -euo pipefail

SCRIPTNAME="$(basename ${BASH_SOURCE[0]})"

USAGE="
seject - Safely eject USB drive

A command-line utility to safely unmount and poweroff USB mass-storage devices.

A bash script that mimics the behavior of “Safely Remove USB Drive” in modern
Linux Desktops. It unmounts all partitions, flushes write cache, and powers off
the USB drive, using udisks2 under the hood.

It ensures data integrity by flushing the write cache, and confirming that no
partitions remain mounted or in use, so the USB drive can be safely unplugged.

The command accepts a single argument, which can be the USB drive device
(e.g. /dev/sdX), or a USB partition device (e.g. /dev/sdXN). In both cases,
the behavior is the same.

Usage: ${SCRIPTNAME} [OPTIONS] device

ARGUMENTS:
  device         : USB storage device path, e.g., /dev/sdX
                   or USB storage partition path, e.g., /dev/sdXN

OPTIONS:
  -D, --debug    : Enable debug output
  -h, --help     : Display usage information
  -V, --version  : Show current version

Examples:

1. Find your USB drive:

  $ lsblk -ln -o NAME,SIZE,TYPE,MOUNTPOINT

2. Safely eject USB drive by device path

  $ ${SCRIPTNAME} /dev/sdX

3. Safely eject USB drive by a partition path

  $ ${SCRIPTNAME} /dev/sdXN
"

VERSION="
${SCRIPTNAME} 1.0.3
Copyright (c) 2025 Rogerio O. Ferraz <rogerio.o.ferraz@gmail.com>
MIT License <https://github.com/rogeriooferraz/seject/blob/main/LICENSE>
This is free and open source software.
There is NO WARRANTY, to the extent permitted by law.
"

# Options
while [ ${#} -gt 0 ] ; do
  case "${1:-}" in
    --debug|-D)
      shift
      set -x
      ;;
    --help|-h)
      echo "${USAGE}"
      exit 0
      ;;
    --version|-V)
      echo "${VERSION}"
      exit 0
      ;;
    *)
      break
      ;;
  esac
done

# Validate user input
if [[ "${#}" != 1 ]]; then
  echo "Error: invalid or missing argument" >&2
  echo "See '${SCRIPTNAME} --help' or manual page for more information" >&2
  exit 1
fi

# Get device path
DEVICE="${1:-}"
if [[ -z "${DEVICE}" ]]; then
  echo "error: no device specified" >&2
  echo "See '${SCRIPTNAME} --help' or manual page for more information" >&2
  exit 2
fi
if [[ ! -b "${DEVICE}" ]]; then
  echo "error: device not found: ${DEVICE}" >&2
  echo "See '${SCRIPTNAME} --help' or manual page for more information" >&2
  exit 3
fi
BASENAME="$(basename ${DEVICE})"
if [[ "${BASENAME}" =~ ^(sd[a-z])$ ]]; then
  DRIVE="/dev/${BASH_REMATCH[1]}"
elif [[ "${BASENAME}" =~ ^(sd[a-z])([0-9]+)$ ]]; then
  DRIVE="/dev/${BASH_REMATCH[1]}"
else
  echo "error: unsupported device: ${BASENAME}" >&2
  echo "See '${SCRIPTNAME} --help' or manual page for more information" >&2
  exit 4
fi

# Check dependencies
if ! command -v udisksctl &> /dev/null; then
  echo "error: udisksctl not found. Please install udisks2" >&2
  exit 5
fi
if ! command -v fuser &> /dev/null; then
  echo "error: fuser not found. Please install psmisc" >&2
  exit 6
fi
if ! command -v sync &> /dev/null; then
  echo "error: sync not found. Please install coreutils" >&2
  exit 7
fi
if ! command -v lsblk &> /dev/null; then
  echo "error: lsblk not found. Please install util-linux" >&2
  exit 8
fi

# Unmount device partition(s)
MOUNTED_LEFT=0
while read -r PART MOUNTPOINT; do
  PARTITION="/dev/${PART}"
  if [[ -n "${MOUNTPOINT}" && -e "${PARTITION}" ]]; then
    echo "Unmounting ${PARTITION} (${MOUNTPOINT})..."
    sync
    ERR_MSG=$(udisksctl unmount -b "${PARTITION}" 2>&1 1>/dev/null) || {
      if ! fuser -s "${PARTITION}"; then
        echo "error: failed to unmount ${PARTITION}" >&2
        echo "${ERR_MSG}" >&2
        exit 9
      else
        timeout=10
        waited=0
        echo "Waiting for ${PARTITION} to become free..."
        echo -n "."
        sleep 1
        (( waited++ ))
        sync
        while true; do
          if ERR_MSG=$(udisksctl unmount -b "${PARTITION}" 2>&1 1>/dev/null); then
            if ! fuser -s "${PARTITION}"; then
              echo "error: failed to unmount ${PARTITION}" >&2
              echo "${ERR_MSG}" >&2
              exit 10
            else
              if (( waited >= timeout )); then
                echo -e "\nerror: failed to unmount ${PARTITION}" >&2
                echo "${ERR_MSG}" >&2
                exit 11
              else
                echo -n "."
                sleep 1
                (( waited++ ))
                sync
              fi
            fi
          else
            break
          fi
        done
        echo -e "\n"
      fi
    }
    echo "Unmounted ${PARTITION}"
  fi
done < <(lsblk -ln -o NAME,MOUNTPOINT "${DRIVE}")

# Flush write cache
echo "Flushing write cache (sync)..."
sync

# Final sync before power-off
sync

# Power off
if [[ -b "${DRIVE}" ]]; then
  echo "Powering off ${DRIVE}..."
  udisksctl power-off -b "${DRIVE}" || {
    echo "error: failed to power off drive ${DRIVE}" >&2
    exit 12
  }
else
  echo "Skipping power-off: ${DRIVE} no longer exists"
fi

echo "You may now safely unplug the device"
exit 0
